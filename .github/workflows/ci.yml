name: Laravel CI/CD Pipeline

# This workflow runs on push and pull requests to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    env:
        DB_CONNECTION: sqlite
        DB_DATABASE: ':memory:'
    steps:
      # Step 1: Checkout the code from the repo
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Setup PHP with required extensions
      - name: Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, pdo, pdo_mysql, xml
          ini-values: post_max_size=256M, max_execution_time=300
          coverage: none

      # Step 3: Install Composer dependencies
      - name: Install Composer Dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader --no-interaction

          
      # Step 5: Run migrations for the test database
      - name: Run Migrations
        run: php artisan migrate --force

      - name: List Tables
        run: php artisan tinker --execute="DB::select('PRAGMA table_info(workouts)')"


      # Step 6: Run PHPUnit tests
      - name: Run Tests
        run: vendor/bin/phpunit --testdox

  # Job for deployment (runs only if tests pass)
#   deploy:
#     runs-on: ubuntu-latest
#     needs: laravel-tests  # Ensure tests pass before deployment

#     steps:
#       # Step 1: Checkout the code from the repo
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       # Step 2: Deploy to Production via SSH
#       - name: Deploy to Production
#         uses: appleboy/ssh-action@v0.1.1
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           script: |
#             cd /path/to/your/app
#             git pull origin main
#             composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader
#             php artisan migrate --force
#             php artisan config:clear
#             php artisan cache:clear
#             php artisan route:clear
#             php artisan view:clear
#             php artisan optimize

#       # Optionally, you can restart services like the web server
#       - name: Restart Nginx (Optional)
#         run: sudo systemctl restart nginx
#         if: success()  # Only restart if the deployment is successful
